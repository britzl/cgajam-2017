local rs = require "render.settings"

local GRAVITY = vmath.vector3(0, -700, 0)

local TRIGGER_RESPONSE = hash("trigger_response")
local COLLISION_RESPONSE = hash("collision_response")
local CONTACT_POINT_RESPONSE = hash("contact_point_response")

local CURSOR = hash("cursor")
local PEG = hash("peg")
local WALL = hash("wall")
local DEATH = hash("death")
local GOAL = hash("goal")

local TOUCH = hash("touch")


local function post_to_controller(message_id, message)
	msg.post("controller:/controller", message_id, message or {})
end

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("camera#camera", "acquire_camera_focus")

	self.initial_position = go.get_position()
	self.velocity = vmath.vector3()
	self.correction = vmath.vector3()
	msg.post("@render:", "clear_color", { color = vmath.vector4(0x55/0xff, 0xff/0xff, 0x55/0xff, 1) })
end


function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end


function update(self, dt)
	if self.pulling then
		return
	end
	
	
	self.velocity = self.velocity + GRAVITY * dt
	
	local pos = go.get_position()

	if self.peg_id then
		local peg_pos = go.get_world_position(self.peg_id)
		local peg_force = pos - peg_pos
		peg_force.x = peg_force.x * 0.75
		self.velocity = self.velocity - peg_force * 150 * dt
		self.velocity = self.velocity * 0.9
	else
	end	
	
	
	pos = pos + self.velocity * dt
	go.set_position(pos)
	
	if self.velocity.y < 0 then
		self.pulled_peg_id = nil
	end
	
	
	local camera_pos = go.get_position("camera")
	camera_pos = vmath.lerp(0.9, camera_pos, pos + vmath.vector3(0, -80, 0))
	camera_pos.x = 0
	camera_pos.y = math.max(camera_pos.y, 0)
	go.set_position(camera_pos, "camera")
	
	self.correction = vmath.vector3()
end


function on_message(self, message_id, message, sender)
	if message_id == TRIGGER_RESPONSE then
		if message.group == PEG then
			if message.other_id ~= self.pulled_peg_id and message.enter then
				self.peg_id = message.other_id
				self.pulled_peg_id = nil
			end
		elseif message.group == CURSOR then
			if message.enter then
				self.ball_id = message.other_id
			else
				self.ball_id = nil
			end
		elseif message.group == DEATH then
			post_to_controller("level_failed")
			--go.set_position(self.initial_position)
			self.velocity = vmath.vector3(0,0,0)
		elseif message.group == GOAL then
			post_to_controller("level_completed")
		end
	elseif message_id == CONTACT_POINT_RESPONSE then
		if message.group == WALL then
			
			local proj = vmath.dot(self.correction, message.normal)
			local comp = (message.distance - proj) * message.normal
			self.correction = self.correction + comp
			go.set_position(go.get_position() + comp)
			
			if math.abs(message.normal.x) > math.abs(message.normal.y) then
				self.velocity.x = -self.velocity.x * 0.9
			else
				self.velocity.y = -self.velocity.y * 0.9
			end
		end
	end
end


function on_input(self, action_id, action)
	if action_id == TOUCH then
		if action.pressed then
			if self.ball_id and self.peg_id then
				self.pulling = true
				msg.post("arrow", "enable")
				post_to_controller("playing_level")
			end
		elseif action.released then
			if self.pulling then
				msg.post("arrow", "disable")
				local distance_to_peg = go.get_world_position(self.peg_id) - go.get_world_position()
				local force = distance_to_peg * 15
				self.velocity = self.velocity + force
				self.pulling = false
				self.pulled_peg_id = self.peg_id
				self.peg_id = nil
			end
		end
		
		if self.pulling then
			local ball_pos = go.get_world_position()
			local peg_pos = go.get_world_position(self.peg_id)
			local distance = vmath.length(ball_pos - peg_pos)
			local arrow_pos = vmath.lerp(1.5, ball_pos, peg_pos)
			arrow_pos.z = -0.5
			go.set_position(arrow_pos, "arrow")
			
			local dx = peg_pos.x - ball_pos.x
			local dy = peg_pos.y - ball_pos.y
			local radians = math.atan2(dy, dx)
			go.set_rotation(vmath.quat_rotation_z(radians), "arrow")
			
			local camera_pos = go.get_position("camera")
			go.set_position(vmath.vector3(action.screen_x / rs.ZOOM, camera_pos.y + action.screen_y / rs.ZOOM, 0))
		end	
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
